
Need to check that username and email are unique

the login chapter
	- flask-login (py -m pip install flask-login)
	- @login_required
	- secure redirects
	- wtforms + functions in the form class
	- flash

ch 7. Error Handling
	- nver run debug mode on production server
	-  @errorhandler
	- db.session.rollback 
	- os.environ (try to use "set" in the python3 consol in pythonanywher?)
	(start a .env file)
	- fake email server (py -m smtpd -n -c DebuggingServer localhost:8025)
	- from logging.handlers import RotatingFileHandler
	
	
the email chapter
	- flask-mail (py -m pip install flask-mail), uses app.config object
	- json web tokens (py -m pip install pyjwt)
	- 
	
https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins
- flask-login (current_user, login_user, logout_user, loginmanager, @login_required)
- werkzerg's url_parse and check netloc
- flask-paranoid
- two factor auth


key terms:
venv
tokens
cookies
authentication
signatures (public key signatures)
secret key
json web tokens
api keys
oauth (third party reg/log)
resful authentication
cookie security
https
A+ rating
exaustic ssl analysis service  - 
https://www.ssllabs.com/ssltest/analyze.html
gunicorn
nginx
certificate Authority (CA) - signs the cert for public severs
https://www.peterspython.com/en/blog/flask-site-penetration-tests-security-headers-and-the-session-cookie
https://letsencrypt.org/


security headers
from werkzeug.http import http_date
SESSION_COOKIE_SECURE = True
bcrypt vs flaskwtf


http gives ssl cert(
1. server id, signed, verifies legit
2. get encryption key for comm with server)

 pip install pyopenssl
 ...
 ...
if __name__ == "__main__":
    app.run(ssl_context='adhoc')
	
This gives you an adhoc ssl cert
Then you get:$ python hello.py
 * Running on https://127.0.0.1:5000/ (Press CTRL+C to quit)
browser will give warning. Not good for real use.


then there are self signed certs
install openssl and then:
openssl req -x509 -newkey rsa:4096 -nodes -out cert.pem -keyout key.pem -days 365

will ask questions and then leave you with a 
cert.pem and a key.pem good for one year
browser still complains

For production:
With gunicorn:
gunicorn --certfile cert.pem --keyfile key.pem -b 0.0.0.0:8000 hello:app

For public:
https://letsencrypt.org/  free CA 
install cert-bot from them and use it to request a cert
good for a year or less then renew from cli


